//一个N x N的网格(grid) 代表了一块樱桃地，每个格子由以下三种数字的一种来表示： 
//
// 
// 0 表示这个格子是空的，所以你可以穿过它。 
// 1 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。 
// -1 表示这个格子里有荆棘，挡着你的路。 
// 
//
// 你的任务是在遵守下列规则的情况下，尽可能的摘到最多樱桃： 
//
// 
// 从位置 (0, 0) 出发，最后到达 (N-1, N-1) ，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为0或者1的格子）； 
// 当到达 (N-1, N-1) 后，你要继续走，直到返回到 (0, 0) ，只能向上或向左走，并且只能穿越有效的格子； 
// 当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为0）； 
// 如果在 (0, 0) 和 (N-1, N-1) 之间不存在一条可经过的路径，则没有任何一个樱桃能被摘到。 
// 
//
// 示例 1: 
//
// 
//输入: grid =
//[[0, 1, -1],
// [1, 0, -1],
// [1, 1,  1]]
//输出: 5
//解释： 
//玩家从（0,0）点出发，经过了向下走，向下走，向右走，向右走，到达了点(2, 2)。
//在这趟单程中，总共摘到了4颗樱桃，矩阵变成了[[0,1,-1],[0,0,-1],[0,0,0]]。
//接着，这名玩家向左走，向上走，向上走，向左走，返回了起始点，又摘到了1颗樱桃。
//在旅程中，总共摘到了5颗樱桃，这是可以摘到的最大值了。
// 
//
// 说明: 
//
// 
// grid 是一个 N * N 的二维数组，N的取值范围是1 <= N <= 50。 
// 每一个 grid[i][j] 都是集合 {-1, 0, 1}其中的一个数。 
// 可以保证起点 grid[0][0] 和终点 grid[N-1][N-1] 的值都不会是 -1。 
// 
// Related Topics 数组 动态规划 矩阵 👍 313 👎 0


package com.wjp.leetcode.editor.cn;

class CherryPickup {
    public static void main(String[] args) {
        Solution solution = new CherryPickup().new Solution();
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        /**
         * 来回走一次能摘的最多，第一次的结果会影响到第二次的选择，会出现 9 + 1 < 6 + 6的情况
         * 第一次走做的选择，需要考虑第二次走？这个比较难
         * 因为是来回走，所有可以把两次走，当作一次走两人，此时，每次一步都考虑计算当前的最优解
         */
        public int cherryPickup(int[][] grid) {
            int n = grid.length;

            // dp[k][i][j] 走了第k步时，A在grid[i][k-i]，B在 grid[j][k-j]位置上，摘到的樱桃个数
            // 在第k步时
            // 对于 g[k][i][j],
            // A可能从 g[k-1][i-1][j] 或 g[k-1][i][j] 过来，
            // B可能从 g[k-1][i][j-1] 或 g[k-1][i][j] 过来
            // 如何保证 g[k][i][j] 最大？
            // 如何从上一个状态转换过来？
            // >> : f[k-1][i-1][j-]
            // VV : f[k-1][i][j]
            // >V : f[k-1][i-1][j]
            // V> : f[k-1][j][i-1]
            // 取最大值 + 当前可能增加的樱桃
            int[][][] f = new int[2 * n - 1][n][n];
            f[0][0][0] = grid[0][0];
            for (int k = 1; k < 2 * n - 1; k++) {
                for (int i = 0; i < n; i++) {
                    for (int j = 0; j < n; j++) {
                        if (k - i < 0 || k - j < 0 || k - i >= n || k - j >= n) {
                            continue;
                        }
                        if (grid[i][k - i] == -1 || grid[j][k - j] == -1) {
                            f[k][i][j] = -1;
                        } else {
                        }
                    }
                }
            }
            return 0;

        }
    }


//leetcode submit region end(Prohibit modification and deletion)

}